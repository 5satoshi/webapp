openapi: 3.0.1
info:
  title: Lightning Stats Dashboard API
  description: |-
    This API provides access to pre-calculated network analysis data for the Lightning Stats Dashboard. The data is primarily sourced from a `betweenness` table in BigQuery, which contains metrics like betweenness centrality, shortest path share, and node rankings.

    The API is designed to be used by the dashboard's frontend to populate various charts and data cards. It allows for querying top nodes, historical data for specific nodes, and network graph structures.
  version: '1.0'
servers:
  - url: /
    description: Local server
  - url: https://5sats.com
    description: Production server
tags:
  - name: Betweenness Analysis
    description: Endpoints for querying network graph analysis data like shortest path share and node rankings.

paths:
  /api/betweenness/top-nodes:
    get:
      tags:
        - Betweenness Analysis
      summary: Get Top Nodes by Shortest Path Share
      description: |-
        Retrieves a list of top-ranking nodes for 'micro', 'common', and 'macro' payment categories based on their latest shortest path share.
        The response includes detailed stats (share and rank) for all three categories for each top node, which is useful for tooltips and comparative analysis.
      parameters:
        - name: limit
          in: query
          description: The number of top nodes to return for each category.
          required: false
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 20
      responses:
        '200':
          description: A successful response containing the top nodes for each category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTopNodes'
        '500':
          description: Internal Server Error if data fetching fails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/betweenness/node-timeline:
    get:
      tags:
        - Betweenness Analysis
      summary: Get Node's Historical Shortest Path Share
      description: Retrieves the historical shortest path share for a specific node over a given time period, aggregated by day, week, month, or quarter.
      parameters:
        - name: nodeId
          in: query
          description: The public key (node ID) of the node to query.
          required: true
          schema:
            type: string
            example: '03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69'
        - name: aggregation
          in: query
          description: The time period to aggregate the data by.
          required: false
          schema:
            type: string
            enum: [day, week, month, quarter]
            default: week
      responses:
        '200':
          description: An array of historical data points for the node's shortest path share.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkSubsumptionData'
        '400':
          description: Bad Request if the `nodeId` parameter is missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error if data fetching fails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/betweenness/node-ranks:
    get:
      tags:
        - Betweenness Analysis
      summary: Get Node's Current Ranks and Changes
      description: Retrieves the latest rank and share for a specific node across all payment categories, along with the change in rank compared to the start of the selected period.
      parameters:
        - name: nodeId
          in: query
          description: The public key (node ID) of the node to query.
          required: true
          schema:
            type: string
            example: '03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69'
        - name: aggregation
          in: query
          description: The time period used to determine the start date for rank comparison.
          required: false
          schema:
            type: string
            enum: [day, week, month, quarter]
            default: week
      responses:
        '200':
          description: An object containing the rank and share data for the node across all categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OurNodeRanksForAllCategories'
        '400':
          description: Bad Request if the `nodeId` parameter is missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error if data fetching fails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/betweenness/node-graph:
    get:
      tags:
        - Betweenness Analysis
      summary: Get Node Graph Data (Orchestrator)
      description: |-
        Orchestrates calls to other APIs to construct a graph of a central node and its neighbors.
        1. It iteratively calls `/api/betweenness/nearest-neighbors` to discover nodes up to a specified `degree`.
        2. It then calls `/api/betweenness/top-edges` with all discovered node IDs to get the connections between them.
        This endpoint is what the frontend's Graph Inspection Card should call.
      parameters:
        - name: nodeId
          in: query
          description: The public key (node ID) of the central node for the graph.
          required: true
          schema:
            type: string
            example: '03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69'
        - name: numNeighbors
          in: query
          description: The number of nearest neighbors to fetch for each node at each degree level.
          required: false
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 10
        - name: degree
          in: query
          description: The number of degrees (levels) of neighbors to fetch out from the central node.
          required: false
          schema:
            type: integer
            default: 2
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: A successful response containing the nodes and links for the graph visualization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGraphData'
        '400':
          description: Bad Request if `nodeId` is missing.
        '500':
          description: Internal Server Error if data fetching or orchestration fails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/betweenness/nearest-neighbors:
    get:
      tags:
        - Betweenness Analysis
      summary: Get Nearest Neighbors for a List of Nodes
      description: Retrieves the top N immediate (1st degree) neighbors for a given list of nodes, based on 'common' shortest path share. This is a utility endpoint called by the `node-graph` orchestrator.
      parameters:
        - name: nodeIds
          in: query
          description: A comma-separated list of node IDs to find neighbors for.
          required: true
          schema:
            type: string
            example: '03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69,02f1a8c87607f415c8f22c00593121b2603d15413f283fe43c7d6d8436173f48b4'
        - name: limit
          in: query
          description: The maximum number of neighbors to return for *each* source node in the `nodeIds` list.
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: A successful response containing an aggregated list of unique neighbors.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    nodeId:
                      type: string
                      description: The node ID of the neighbor.
                    share:
                      type: number
                      format: float
                      description: The highest shortest path share value connecting this neighbor to any of the source nodes.
        '400':
          description: Bad Request if `nodeIds` parameter is missing or empty.
        '500':
          description: Internal Server Error if data fetching fails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/betweenness/top-edges:
    get:
      tags:
        - Betweenness Analysis
      summary: Get Top Edges Between a Set of Nodes
      description: Retrieves the connections (edges) that exist between a given set of nodes, ordered by 'common' shortest path share. This is a utility endpoint called by the `node-graph` orchestrator.
      parameters:
        - name: nodeIds
          in: query
          description: A comma-separated list of node IDs for which to find edges.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of edges to return.
          required: false
          schema:
            type: integer
            default: 500
            minimum: 1
            maximum: 500
      responses:
        '200':
          description: A successful response containing a list of edges.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    source:
                      type: string
                    destination:
                      type: string
                    share:
                      type: number
                      format: float
        '400':
          description: Bad Request if `nodeIds` is missing or empty.
        '500':
          description: Internal Server Error if data fetching fails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: A summary of the error.
        details:
          type: string
          description: Additional details about the error.

    SingleCategoryTopNode:
      type: object
      properties:
        nodeid:
          type: string
        alias:
          type: string
          nullable: true
        categoryShare:
          type: number
          format: float
          nullable: true
        categoryRank:
          type: integer
          nullable: true
        microShare:
          type: number
          format: float
          nullable: true
        microRank:
          type: integer
          nullable: true
        commonShare:
          type: number
          format: float
          nullable: true
        commonRank:
          type: integer
          nullable: true
        macroShare:
          type: number
          format: float
          nullable: true
        macroRank:
          type: integer
          nullable: true

    AllTopNodes:
      type: object
      properties:
        micro:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
        common:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
        macro:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'

    NetworkSubsumptionData:
      type: object
      properties:
        date:
          type: string
          format: date
        micro:
          type: number
          format: float
          description: Percentage share for micro payments.
        common:
          type: number
          format: float
          description: Percentage share for common payments.
        macro:
          type: number
          format: float
          description: Percentage share for macro payments.

    OurNodeCategoryRank:
      type: object
      properties:
        latestRank:
          type: integer
          nullable: true
        rankChange:
          type: integer
          nullable: true
          description: Change in rank from the start of the period. Negative is better.
        latestShare:
          type: number
          format: float
          nullable: true
        previousShare:
          type: number
          format: float
          nullable: true

    OurNodeRanksForAllCategories:
      type: object
      properties:
        micro:
          $ref: '#/components/schemas/OurNodeCategoryRank'
        common:
          $ref: '#/components/schemas/OurNodeCategoryRank'
        macro:
          $ref: '#/components/schemas/OurNodeCategoryRank'

    GraphNode:
      type: object
      properties:
        id:
          type: string
          description: The node's public key.
        name:
          type: string
          description: The node's alias or a formatted, truncated ID.
        val:
          type: number
          description: A value used to determine the node's size in the visualization.
        isCentralNode:
          type: boolean
        color:
          type: string
          description: The HSL color string for the node.
    
    GraphLink:
      type: object
      properties:
        source:
          type: string
          description: The source node ID of the link.
        target:
          type: string
          description: The target node ID of the link.
        value:
          type: number
          format: float
          description: The shortest path share value for this link.

    NodeGraphData:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/GraphNode'
        links:
          type: array
          items:
            $ref: '#/components/schemas/GraphLink'

    