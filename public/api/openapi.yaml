openapi: 3.0.3
info:
  title: Lightning Stats Dashboard API
  description: |-
    This API provides access to network statistics, node data, and analytics for the Lightning Stats Dashboard.
    It is used by the frontend to fetch data for visualizations and insights.
  version: 1.0.0
  contact:
    email: contact@5sats.com
  x-logo:
    url: "/logo.svg"
    altText: "5satoshi Logo"
servers:
  - url: /api
    description: Local API server
  - url: https://5sats.com/api
    description: Production API Server
tags:
  - name: Betweenness
    description: Operations related to betweenness centrality and routing analysis.
paths:
  /betweenness/node-timeline:
    get:
      tags:
        - Betweenness
      summary: Get historical shortest path share for a specific node
      description: Fetches a time series of a node's shortest path share for different payment sizes (micro, common, macro).
      operationId: getNodeTimeline
      parameters:
        - name: nodeId
          in: query
          required: true
          description: The public key of the node to query.
          schema:
            type: string
        - name: aggregation
          in: query
          required: false
          description: The time period for aggregation.
          schema:
            type: string
            enum: [day, week, month, quarter]
            default: week
      responses:
        '200':
          description: A list of time series data for the node's shortest path share.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkSubsumptionData'
        '400':
          description: 'nodeId parameter is missing.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "nodeId parameter is required"
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /betweenness/node-ranks:
    get:
      tags:
        - Betweenness
      summary: Get current ranks and share for a node
      description: Fetches the latest rank and shortest path share for a specific node across micro, common, and macro payment categories, including the change since the start of the selected period.
      operationId: getNodeRanks
      parameters:
        - name: nodeId
          in: query
          required: true
          description: The public key of the node to query.
          schema:
            type: string
        - name: aggregation
          in: query
          required: false
          description: The time period to calculate rank changes against.
          schema:
            type: string
            enum: [day, week, month, quarter]
            default: week
      responses:
        '200':
          description: An object containing the rank and share data for all categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OurNodeRanksForAllCategories'
        '400':
          description: 'nodeId' parameter is missing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "nodeId parameter is required"
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /betweenness/top-nodes:
    get:
      tags:
        - Betweenness
      summary: Get top nodes by shortest path share
      description: Fetches a list of the top nodes ranked by their shortest path share for micro, common, and macro payment categories.
      operationId: getTopNodes
      parameters:
        - name: limit
          in: query
          required: false
          description: The number of top nodes to return for each category.
          schema:
            type: integer
            default: 3
      responses:
        '200':
          description: An object containing lists of top nodes for each category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTopNodes'
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /betweenness/channel-drain:
    get:
      tags:
        - Betweenness
      summary: Get channel drain and share data
      description: Fetches inbound share, outbound share, and the calculated drain for a given list of short channel IDs.
      operationId: getChannelDrain
      parameters:
        - name: shortChannelIds
          in: query
          required: true
          description: A comma-separated list of short channel IDs to query.
          schema:
            type: string
            example: "535050x927x0,535050x927x1"
      responses:
        '200':
          description: An object mapping each short channel ID to its share and drain data.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    in_share:
                      type: number
                      format: float
                      description: The inbound shortest path share for common payments.
                    out_share:
                      type: number
                      format: float
                      description: The outbound shortest path share for common payments.
                    drain:
                      type: number
                      format: float
                      nullable: true
                      description: "The calculated drain: log((in_share + ε) / (out_share + ε)). Positive values indicate inbound flow, negative values indicate outbound flow."
        '400':
          description: 'shortChannelIds parameter is missing.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "shortChannelIds parameter is required"
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /betweenness/neighbor-graph:
    get:
      tags:
        - Betweenness
      summary: Discover a graph of neighboring nodes
      description: Orchestrates the discovery of a graph by starting with a central node and expanding outwards by a specified number of degrees and neighbors per node. It then calls the `/node-graph` endpoint to get the final data.
      operationId: getNeighborGraph
      parameters:
        - name: nodeId
          in: query
          required: true
          description: The public key of the central node to start the graph from.
          schema:
            type: string
        - name: numNeighbors
          in: query
          required: false
          description: The number of top-ranked neighbors to fetch for each node at each degree.
          schema:
            type: integer
            default: 3
        - name: degree
          in: query
          required: false
          description: The number of degrees of separation to explore from the central node.
          schema:
            type: integer
            default: 2
      responses:
        '200':
          description: The structured graph data containing nodes and links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGraphData'
        '400':
          description: 'nodeId parameter is missing.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "nodeId parameter is required"
        '500':
          description: Server error while orchestrating graph data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /betweenness/node-graph:
    get:
      tags:
        - Betweenness
      summary: Get graph data for a specific list of nodes
      description: Fetches the structured graph data, including aliases and links, for a specific list of provided node IDs.
      operationId: getNodeGraph
      parameters:
        - name: nodeIds
          in: query
          required: true
          description: A comma-separated list of node IDs to include in the graph.
          schema:
            type: string
      responses:
        '200':
          description: The structured graph data containing nodes and links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGraphData'
        '400':
          description: 'nodeIds parameter is missing.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "nodeIds parameter is required"
        '500':
          description: Server error while fetching graph data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    NetworkSubsumptionData:
      type: object
      properties:
        date:
          type: string
          format: date
          description: The date for the data point.
        micro:
          type: number
          format: float
          description: Shortest path share percentage for micro payments (200 sats).
        common:
          type: number
          format: float
          description: Shortest path share percentage for common payments (50k sats).
        macro:
          type: number
          format: float
          description: Shortest path share percentage for macro payments (4M sats).
    OurNodeCategoryRank:
      type: object
      properties:
        latestRank:
          type: integer
          nullable: true
          description: The node's most recent rank for this category.
        rankChange:
          type: integer
          nullable: true
          description: The change in rank compared to the start of the period. Negative is better.
        latestShare:
          type: number
          format: float
          nullable: true
          description: The node's most recent shortest path share for this category.
        previousShare:
          type: number
          format: float
          nullable: true
          description: The node's shortest path share at the start of the period.
    OurNodeRanksForAllCategories:
      type: object
      properties:
        micro:
          $ref: '#/components/schemas/OurNodeCategoryRank'
        common:
          $ref: '#/components/schemas/OurNodeCategoryRank'
        macro:
          $ref: '#/components/schemas/OurNodeCategoryRank'
    SingleCategoryTopNode:
      type: object
      properties:
        nodeid:
          type: string
          description: The public key of the node.
        alias:
          type: string
          nullable: true
          description: The alias of the node.
        categoryShare:
          type: number
          format: float
          nullable: true
          description: The share for the primary category this node is ranked in.
        categoryRank:
          type: integer
          nullable: true
          description: The rank for the primary category.
        microShare:
          type: number
          format: float
          nullable: true
        microRank:
          type: integer
          nullable: true
        commonShare:
          type: number
          format: float
          nullable: true
        commonRank:
          type: integer
          nullable: true
        macroShare:
          type: number
          format: float
          nullable: true
        macroRank:
          type: integer
          nullable: true
    AllTopNodes:
      type: object
      properties:
        micro:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
        common:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
        macro:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
    GraphNode:
      type: object
      properties:
        id:
          type: string
          description: The node's public key.
        name:
          type: string
          description: The display name (alias or truncated ID).
        val:
          type: number
          description: A value used for sizing the node in the visualization.
        isCentralNode:
          type: boolean
          description: Whether this is the central node of the graph.
        color:
          type: string
          description: The color of the node in the graph.
    GraphLink:
      type: object
      properties:
        source:
          type: string
          description: The node ID of the source node.
        target:
          type: string
          description: The node ID of the target node.
        value:
          type: number
          format: float
          description: The shortest path share value of the link, used for visual weighting.
    NodeGraphData:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/GraphNode'
        links:
          type: array
          items:
            $ref: '#/components/schemas/GraphLink'
    Error:
      type: object
      properties:
        error:
          type: string
          description: A description of the error.
        details:
          type: string
          description: Optional additional details about the error.
      required:
        - error
