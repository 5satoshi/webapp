
openapi: 3.0.0
info:
  title: Lightning Stats Dashboard API
  description: API for the Lightning Stats Dashboard application, providing access to betweenness centrality, network graph data, and other node statistics.
  version: 1.0.0
servers:
  - url: /
    description: Local server
  - url: https://5sats.com
    description: Production server

paths:
  /api/betweenness/node-graph:
    get:
      summary: Get Node Graph Data
      description: |-
        Fetches a network subgraph centered around a specific node.
        - Selects the top N 1st-degree neighbors based on highest share.
        - For each 1st-degree neighbor, selects their top N 2nd-degree neighbors.
        - Returns all selected nodes and all edges from the database that connect any two of these nodes.
      operationId: getNodeGraph
      parameters:
        - name: nodeId
          in: query
          required: true
          description: The node ID to center the graph on.
          schema:
            type: string
        - name: numNeighbors
          in: query
          required: false
          description: The number of 1st and 2nd degree neighbors to retrieve per level.
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: A graph structure with nodes and links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGraphData'
        '400':
          description: Bad request, missing or invalid parameters.
        '500':
          description: Internal server error.

  /api/betweenness/nearest-neighbors:
    get:
      summary: Get Nearest Neighbors by Share
      description: |-
        Returns a list of the top X nearest neighbors to a given node, ordered by shortest_path_share for 'common' payments.
        Can fetch neighbors of different degrees (1st, 2nd) based on the `degrees` parameter.
      operationId: getNearestNeighbors
      parameters:
        - name: nodeId
          in: query
          required: true
          description: The node ID to get neighbors for.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of neighbors to return per degree level. Defaults to 10.
          schema:
            type: integer
            default: 10
        - name: degrees
          in: query
          required: false
          description: "Comma-separated list of neighbor degrees to fetch (e.g., '1' for 1st-degree, '1,2' for 1st and 2nd-degree). Defaults to '1'."
          schema:
            type: string
            default: '1'
          example: '1,2'
      responses:
        '200':
          description: A list of neighbor nodes, sorted by degree then by share.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NeighborNode'
        '400':
          description: Bad request, missing or invalid parameters.
        '500':
          description: Internal server error.

  /api/betweenness/top-edges:
    get:
      summary: Get Top Edges Between a Set of Nodes
      description: |-
        Given a list of node IDs, this returns the top N edges with the highest `shortest_path_share` that connect any two nodes within the provided list.
      operationId: getTopEdges
      parameters:
        - name: nodeIds
          in: query
          required: true
          description: A comma-separated list of node IDs.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The maximum number of edges to return. Defaults to 25.
          schema:
            type: integer
            default: 25
      responses:
        '200':
          description: A list of edges with source, destination, and share.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Edge'
        '400':
          description: Bad request, missing or invalid parameters.
        '500':
          description: Internal server error.

components:
  schemas:
    GraphNode:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        val:
          type: number
        isCentralNode:
          type: boolean
        color:
          type: string

    GraphLink:
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        value:
          type: number

    NodeGraphData:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/GraphNode'
        links:
          type: array
          items:
            $ref: '#/components/schemas/GraphLink'

    NeighborNode:
      type: object
      properties:
        nodeId:
          type: string
        alias:
          type: string
          nullable: true
        share:
          type: number
          format: float
          description: "The shortest_path_share of the edge connecting this neighbor to its parent (1st or central node)."
        degree:
          type: integer
          description: "The degree of separation from the original nodeId (1 or 2)."
    
    Edge:
      type: object
      properties:
        source:
          type: string
        destination:
          type: string
        share:
          type: number
          format: float
          description: "The shortest_path_share of the edge."
