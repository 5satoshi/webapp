openapi: 3.0.3
info:
  title: Lightning Stats Dashboard API
  description: |-
    This is the internal API for the Lightning Stats Dashboard.
    It provides data related to network analysis, node statistics, and other metrics that power the frontend visualizations.
    The API primarily queries a BigQuery backend.
  version: 1.0.0
tags:
  - name: Betweenness
    description: APIs related to network betweenness centrality and shortest path analysis.
paths:
  /api/betweenness/top-nodes:
    get:
      summary: Get Top Nodes by Shortest Path Share
      description: |-
        Fetches a list of the top nodes based on their shortest path share for different payment size categories (micro, common, macro).
        The primary data source is the `betweenness` table in BigQuery.
      tags:
        - Betweenness
      parameters:
        - name: limit
          in: query
          required: false
          description: The number of top nodes to return for each category.
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: A successful response with lists of top nodes for each category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTopNodes'
        '500':
          description: Internal Server Error. Failed to fetch data from the backend.
  /api/betweenness/node-timeline:
    get:
      summary: Get Node's Historical Shortest Path Share
      description: |-
        Retrieves the historical timeline of a specific node's shortest path share across different payment categories.
        Data is aggregated by the specified period (day, week, month, quarter).
      tags:
        - Betweenness
      parameters:
        - name: nodeId
          in: query
          required: true
          description: The public key (node ID) of the node to query.
          schema:
            type: string
            example: "03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69"
        - name: aggregation
          in: query
          required: false
          description: The time period to aggregate the data by.
          schema:
            type: string
            enum: [day, week, month, quarter]
            default: week
      responses:
        '200':
          description: An array of historical data points for the node's shortest path share.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkSubsumptionData'
        '400':
          description: Bad Request. The 'nodeId' parameter is missing.
        '500':
          description: Internal Server Error.
  /api/betweenness/node-ranks:
    get:
      summary: Get Node Ranks and Share Changes
      description: |-
        Fetches the latest network rank and the change in rank for a specific node over a given aggregation period.
        It also includes the latest and previous shortest path share values used for comparison.
      tags:
        - Betweenness
      parameters:
        - name: nodeId
          in: query
          required: true
          description: The public key (node ID) of the node to query.
          schema:
            type: string
            example: "03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69"
        - name: aggregation
          in: query
          required: false
          description: The period over which to calculate the rank change.
          schema:
            type: string
            enum: [day, week, month, quarter]
            default: week
      responses:
        '200':
          description: An object containing the rank and share data for the node across all categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OurNodeRanksForAllCategories'
        '400':
          description: Bad Request. The 'nodeId' parameter is missing.
        '500':
          description: Internal Server Error.
  /api/betweenness/channel-drain:
    get:
      summary: Get In/Out Share and Drain for Channels
      description: |
        Calculates and returns the inbound share, outbound share, and liquidity drain for a given list of short channel IDs.
        Drain is calculated as log((in_share + epsilon) / (out_share + epsilon)), providing insight into liquidity flow.
      tags:
        - Betweenness
      parameters:
        - name: shortChannelIds
          in: query
          required: true
          description: A comma-separated list of short channel IDs to retrieve drain information for.
          schema:
            type: string
            example: "535050x927x0,545062x30x0"
      responses:
        '200':
          description: A successful response with the drain data for the requested channels. The keys of the object are the short channel IDs.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ChannelDrain'
                example:
                  "535050x927x0":
                    in_share: 0.0012
                    out_share: 0.0008
                    drain: 0.405
                  "545062x30x0":
                    in_share: 0.0005
                    out_share: 0.0015
                    drain: -1.098
        '400':
          description: Bad Request. The 'shortChannelIds' parameter is missing or empty.
        '500':
          description: Internal Server Error.
  /api/betweenness/neighbor-graph:
    get:
      summary: Discover and Get a Node's Neighbor Graph
      description: |-
        This is a high-level API that orchestrates graph discovery. It starts with a central node and discovers its neighbors based on shortest path share, up to a specified degree of separation.
        It determines the full list of nodes for the graph and then calls the `/api/betweenness/node-graph` worker API to get the final graph structure.
      tags:
        - Betweenness
      parameters:
        - name: nodeId
          in: query
          required: true
          description: The public key (node ID) of the central node to start the graph from.
          schema:
            type: string
            example: "03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69"
        - name: numNeighbors
          in: query
          required: false
          description: The number of top neighbors to fetch for each node at each degree.
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 10
        - name: degree
          in: query
          required: false
          description: The degrees of separation to explore out from the central node.
          schema:
            type: integer
            default: 2
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: A successful response containing the nodes and links for the discovered graph.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGraphData'
        '400':
          description: Bad Request. The 'nodeId' parameter is missing.
        '500':
          description: Internal Server Error, often due to failures in fetching data from underlying APIs or BigQuery.
  /api/betweenness/node-graph:
    get:
      summary: Get Graph Data for a Specific List of Nodes
      description: |-
        This is a low-level worker API that takes a specific list of node IDs and constructs the graph data for them.
        It fetches node details (like aliases) and all links that exist between the provided nodes.
      tags:
        - Betweenness
      parameters:
        - name: nodeIds
          in: query
          required: true
          description: A comma-separated list of node IDs to include in the graph.
          schema:
            type: string
            example: "03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69,02df5ffe895c73522194514755452d3345335e4e943485984949a20ba9652c92c3"
      responses:
        '200':
          description: A successful response containing the nodes and links for the specified graph.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGraphData'
        '400':
          description: Bad Request. The 'nodeIds' parameter is missing or empty.
        '500':
          description: Internal Server Error.
components:
  schemas:
    SingleCategoryTopNode:
      type: object
      properties:
        nodeid:
          type: string
          description: The public key of the node.
        alias:
          type: string
          nullable: true
          description: The advertised alias of the node.
        categoryShare:
          type: number
          format: float
          nullable: true
          description: The shortest path share for the primary category being ranked.
        categoryRank:
          type: integer
          nullable: true
          description: The rank for the primary category.
        microShare:
          type: number
          format: float
          nullable: true
        microRank:
          type: integer
          nullable: true
        commonShare:
          type: number
          format: float
          nullable: true
        commonRank:
          type: integer
          nullable: true
        macroShare:
          type: number
          format: float
          nullable: true
        macroRank:
          type: integer
          nullable: true
    AllTopNodes:
      type: object
      properties:
        micro:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
        common:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
        macro:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
    NetworkSubsumptionData:
      type: object
      properties:
        date:
          type: string
          format: date
          description: The start date of the aggregation period.
        micro:
          type: number
          format: float
          description: The shortest path share percentage for micro-transactions.
        common:
          type: number
          format: float
          description: The shortest path share percentage for common-transactions.
        macro:
          type: number
          format: float
          description: The shortest path share percentage for macro-transactions.
    OurNodeCategoryRank:
      type: object
      properties:
        latestRank:
          type: integer
          nullable: true
        rankChange:
          type: integer
          nullable: true
          description: Change in rank compared to the start of the period. Negative is better.
        latestShare:
          type: number
          format: float
          nullable: true
        previousShare:
          type: number
          format: float
          nullable: true
    OurNodeRanksForAllCategories:
      type: object
      properties:
        micro:
          $ref: '#/components/schemas/OurNodeCategoryRank'
        common:
          $ref: '#/components/schemas/OurNodeCategoryRank'
        macro:
          $ref: '#/components/schemas/OurNodeCategoryRank'
    ChannelDrain:
      type: object
      properties:
        in_share:
          type: number
          format: float
          description: The inbound shortest path share for the channel.
        out_share:
          type: number
          format: float
          description: The outbound shortest path share for the channel.
        drain:
          type: number
          format: float
          nullable: true
          description: The calculated liquidity drain. Positive values indicate inbound flow, negative values indicate outbound flow.
    GraphNode:
      type: object
      properties:
        id:
          type: string
          description: The node's public key.
        name:
          type: string
          description: The display name (alias or truncated ID).
        val:
          type: number
          description: A value used for sizing the node in the visualization.
        isCentralNode:
          type: boolean
        color:
          type: string
          description: A HSL color string for the node.
    GraphLink:
      type: object
      properties:
        source:
          type: string
          description: The node ID of the link's source.
        target:
          type: string
          description: The node ID of the link's target.
        value:
          type: number
          format: float
          description: The shortest path share value, used for visual weighting.
    NodeGraphData:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/GraphNode'
        links:
          type: array
          items:
            $ref: '#/components/schemas/GraphLink'
            
  x-logo:
    url: "/logo.svg"
    altText: "5satoshi Logo"
```