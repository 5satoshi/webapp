
openapi: 3.0.0
info:
  title: Lightning Stats Dashboard API
  description: API for fetching Lightning Network node statistics and analysis.
  version: "1.0.0"
  contact:
    email: "info@5sats.com"
  x-logo:
    url: "/logo.svg"
    altText: "5satoshi Logo"

paths:
  /api/betweenness/top-nodes:
    get:
      summary: Get Top Nodes by Shortest Path Share
      description: Fetches a list of the top nodes based on their shortest path share for micro, common, and macro payment sizes.
      operationId: getTopNodes
      parameters:
        - name: limit
          in: query
          description: The number of top nodes to return for each category.
          required: false
          schema:
            type: integer
            default: 3
      responses:
        '200':
          description: A list of top nodes for each category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTopNodes'
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch top nodes data"
                  details:
                    type: string
  
  /api/betweenness/node-timeline:
    get:
      summary: Get Node's Shortest Path Share Timeline
      description: Fetches the historical shortest path share data for a specific node, aggregated by a given period.
      operationId: getNodeTimeline
      parameters:
        - name: nodeId
          in: query
          description: The ID of the node to fetch data for.
          required: true
          schema:
            type: string
        - name: aggregation
          in: query
          description: The time period to aggregate the data by.
          required: false
          schema:
            type: string
            enum: [day, week, month, quarter]
            default: week
      responses:
        '200':
          description: An array of timeline data points.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkSubsumptionData'
        '400':
          description: "'nodeId' parameter is missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "nodeId parameter is required"
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch node timeline data"
                  details:
                    type: string

  /api/betweenness/node-ranks:
    get:
      summary: Get Node's Ranks and Share Changes
      description: Fetches the current rank, rank change, and share change for a specific node across all payment categories.
      operationId: getNodeRanks
      parameters:
        - name: nodeId
          in: query
          description: The ID of the node to fetch ranks for.
          required: true
          schema:
            type: string
        - name: aggregation
          in: query
          description: The time period for comparison.
          required: false
          schema:
            type: string
            enum: [day, week, month, quarter]
            default: week
      responses:
        '200':
          description: An object containing ranks and changes for all categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OurNodeRanksForAllCategories'
        '400':
          description: "'nodeId' parameter is missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "nodeId parameter is required"
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch node rank data"
                  details:
                    type: string

  /api/betweenness/channel-drain:
    get:
      summary: Get Channel Drain Information
      description: Fetches the inbound share, outbound share, and calculated drain for a given list of short channel IDs.
      operationId: getChannelDrain
      parameters:
        - name: shortChannelIds
          in: query
          description: A comma-separated list of short channel IDs.
          required: true
          schema:
            type: string
            example: "535050x927x0,535051x1x0"
      responses:
        '200':
          description: A map of short channel IDs to their drain information.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    in_share:
                      type: number
                    out_share:
                      type: number
                    drain:
                      type: number
                      nullable: true
        '400':
          description: "'shortChannelIds' parameter is missing or empty."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "shortChannelIds parameter is required"
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch channel drain data"
                  details:
                    type: string
  
  /api/betweenness/neighbor-graph:
    get:
      summary: Discover and Get a Node's Neighbor Graph
      description: Fetches a graph of a central node and its neighbors up to a specified degree. This is the high-level orchestrator.
      operationId: getNeighborGraph
      parameters:
        - name: nodeId
          in: query
          description: The ID of the central node for the graph.
          required: true
          schema:
            type: string
        - name: numNeighbors
          in: query
          description: The number of top neighbors to fetch for each node.
          required: false
          schema:
            type: integer
            default: 3
        - name: degree
          in: query
          description: The degrees of separation to explore from the central node.
          required: false
          schema:
            type: integer
            default: 2
      responses:
        '200':
          description: The node graph data, including nodes and links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGraphData'
        '400':
          description: "'nodeId' parameter is missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "nodeId parameter is required"
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to orchestrate node graph data"
                  details:
                    type: string
  
  /api/betweenness/node-graph:
    get:
      summary: Get Graph for a Specific List of Nodes
      description: Fetches the graph structure (nodes and links) for a provided list of node IDs. This is the low-level worker API.
      operationId: getNodeGraph
      parameters:
        - name: nodeIds
          in: query
          description: A comma-separated list of node IDs to include in the graph.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The node graph data, including nodes and links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGraphData'
        '400':
          description: "'nodeIds' parameter is missing or empty."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "nodeIds parameter (comma-separated list) is required"
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch node graph data"
                  details:
                    type: string
  
  /api/betweenness/nearest-neighbors:
    get:
      summary: Get Nearest Neighbors for a Node List
      description: Fetches the top N nearest neighbors for a given list of node IDs, based on shortest path share.
      operationId: getNearestNeighbors
      parameters:
        - name: nodeIds
          in: query
          description: A comma-separated list of node IDs to find neighbors for.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of neighbors to return per node.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of neighbor nodes and their share.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    nodeId:
                      type: string
                    share:
                      type: number
        '400':
          description: "'nodeIds' parameter is missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "nodeIds parameter is required"
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch nearest neighbors"
                  details:
                    type: string

  /api/betweenness/top-edges:
    get:
      summary: Get Top Edges Between a Set of Nodes
      description: Fetches the top edges (links) with the highest shortest path share between a given set of nodes.
      operationId: getTopEdges
      parameters:
        - name: nodeIds
          in: query
          description: A comma-separated list of node IDs to find edges between.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of edges to return.
          required: false
          schema:
            type: integer
            default: 25
      responses:
        '200':
          description: A list of edges with their share.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    source:
                      type: string
                    destination:
                      type: string
                    share:
                      type: number
        '400':
          description: "'nodeIds' parameter is missing."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "nodeIds parameter (comma-separated list) is required"
        '500':
          description: Server error while fetching data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch top edges"
                  details:
                    type: string


components:
  schemas:
    SingleCategoryTopNode:
      type: object
      properties:
        nodeid:
          type: string
        alias:
          type: string
          nullable: true
        categoryShare:
          type: number
          nullable: true
        categoryRank:
          type: number
          nullable: true
        microShare:
          type: number
          nullable: true
        microRank:
          type: number
          nullable: true
        commonShare:
          type: number
          nullable: true
        commonRank:
          type: number
          nullable: true
        macroShare:
          type: number
          nullable: true
        macroRank:
          type: number
          nullable: true
    AllTopNodes:
      type: object
      properties:
        micro:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
        common:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
        macro:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
    NetworkSubsumptionData:
      type: object
      properties:
        date:
          type: string
          format: date
        micro:
          type: number
        common:
          type: number
        macro:
          type: number
    OurNodeCategoryRank:
      type: object
      properties:
        latestRank:
          type: number
          nullable: true
        rankChange:
          type: number
          nullable: true
        latestShare:
          type: number
          nullable: true
        previousShare:
          type: number
          nullable: true
    OurNodeRanksForAllCategories:
      type: object
      properties:
        micro:
          $ref: '#/components/schemas/OurNodeCategoryRank'
        common:
          $ref: '#/components/schemas/OurNodeCategoryRank'
        macro:
          $ref: '#/components/schemas/OurNodeCategoryRank'
    GraphNode:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        val:
          type: number
        isCentralNode:
          type: boolean
        color:
          type: string
          nullable: true
    GraphLink:
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        value:
          type: number
    NodeGraphData:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/GraphNode'
        links:
          type: array
          items:
            $ref: '#/components/schemas/GraphLink'
