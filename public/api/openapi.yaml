openapi: 3.0.3
info:
  title: Lightning Stats Dashboard API
  description: |-
    This API provides data for the Lightning Stats Dashboard, focusing on network analysis metrics like betweenness centrality and shortest path shares. It is intended for internal use by the dashboard frontend but is documented here for transparency.

    The data is sourced from a BigQuery backend, which contains pre-calculated network statistics.
  version: "1.0.0"
  contact:
    name: 5satoshi
    url: https://5sats.com
  x-logo:
    url: "/logo.svg"
    altText: "5satoshi Logo"
tags:
  - name: betweenness
    description: Operations related to node betweenness centrality and shortest path shares.
  - name: graph
    description: Operations for fetching graph data for visualization.
paths:
  /api/betweenness/top-nodes:
    get:
      tags:
        - betweenness
      summary: Get Top Nodes by Shortest Path Share
      description: |-
        Retrieves the top nodes for 'micro', 'common', and 'macro' payment categories based on their latest shortest path share.
        This provides a competitive overview of the network's most influential routing nodes for different payment sizes.
      parameters:
        - name: limit
          in: query
          description: The number of top nodes to return for each category.
          required: false
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: A successful response with the top nodes for each category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTopNodes'
        '400':
          description: Invalid 'limit' parameter.
        '500':
          description: Server error while fetching data.
  /api/betweenness/node-timeline:
    get:
      tags:
        - betweenness
      summary: Get Node's Historical Shortest Path Share
      description: Retrieves the historical shortest path share for a specific node over time, aggregated by a given period.
      parameters:
        - name: nodeId
          in: query
          description: The public key of the node to query.
          required: true
          schema:
            type: string
            example: '03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69'
        - name: aggregation
          in: query
          description: The time period to aggregate the data by.
          required: false
          schema:
            type: string
            enum: ['day', 'week', 'month', 'quarter']
            default: 'week'
      responses:
        '200':
          description: An array of historical data points for the node's shortest path share across different payment categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkSubsumptionData'
        '400':
          description: 'nodeId' parameter is missing.
        '500':
          description: Server error while fetching data.
  /api/betweenness/node-ranks:
    get:
      tags:
        - betweenness
      summary: Get Node's Current Ranks and Changes
      description: Fetches the latest rank and share for a specific node across all payment categories, along with the change in rank compared to the beginning of the specified period.
      parameters:
        - name: nodeId
          in: query
          description: The public key of the node to query.
          required: true
          schema:
            type: string
            example: '03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69'
        - name: aggregation
          in: query
          description: The aggregation period to determine the start date for rank comparison.
          required: false
          schema:
            type: string
            enum: ['day', 'week', 'month', 'quarter']
            default: 'week'
      responses:
        '200':
          description: An object containing the rank and share data for the node for each payment category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OurNodeRanksForAllCategories'
        '400':
          description: 'nodeId' parameter is missing.
        '500':
          description: Server error, returns a default structure.
  /api/betweenness/channel-drain:
    get:
      tags:
        - betweenness
      summary: Get Channel Drain Information
      description: |-
        Calculates and returns liquidity drain information for a given list of short channel IDs.
        The drain is calculated as `log((in_share + epsilon) / (out_share + epsilon))`, where 'in_share' and 'out_share' are the node's inbound and outbound shortest path shares for the 'common' payment type. A positive value indicates net inbound flow, while a negative value indicates net outbound flow.
      parameters:
        - name: shortChannelIds
          in: query
          description: A comma-separated list of short channel IDs to query.
          required: true
          schema:
            type: string
            example: '535050x927x0,535050x927x1'
      responses:
        '200':
          description: A map of short channel IDs to their drain information.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ChannelDrainInfo'
        '400':
          description: 'shortChannelIds' parameter is missing or empty.
        '500':
          description: Server error while fetching data.
  /api/betweenness/neighbor-graph:
    get:
      tags:
        - graph
      summary: Discover and Fetch a Node's Graph Neighborhood
      description: This is a high-level API that orchestrates graph discovery. It starts with a central node and discovers its neighborhood based on degrees of separation and the number of top-ranked neighbors to include at each step. It then calls the `/api/betweenness/node-graph` worker API to get the final graph data.
      parameters:
        - name: nodeId
          in: query
          description: The public key of the central node to start the graph from.
          required: true
          schema:
            type: string
            example: '03fe8461ebc025880b58021c540e0b7782bb2bcdc99da9822f5c6d2184a59b8f69'
        - name: numNeighbors
          in: query
          description: The number of top-ranked neighbors to fetch for each node in the frontier.
          required: false
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 10
        - name: degree
          in: query
          description: The number of degrees of separation to explore from the central node.
          required: false
          schema:
            type: integer
            default: 2
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: The full graph data structure for visualization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGraphData'
        '400':
          description: 'nodeId' parameter is missing.
        '500':
          description: Server error during graph orchestration.
  /api/betweenness/node-graph:
    get:
      tags:
        - graph
      summary: Fetch Graph Data for a Specific List of Nodes
      description: This is a worker API that takes a specific list of node IDs and generates the data structure required for graph visualization, including node details (aliases) and the edges (links) connecting them.
      parameters:
        - name: nodeIds
          in: query
          description: A comma-separated list of node IDs to include in the graph.
          required: true
          schema:
            type: string
            example: '03fe8461...b8f69,02fe8461...a9b8f6'
      responses:
        '200':
          description: The full graph data structure for visualization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeGraphData'
        '400':
          description: 'nodeIds' parameter is missing or empty.
        '500':
          description: Server error while fetching graph data.
components:
  schemas:
    SingleCategoryTopNode:
      type: object
      properties:
        nodeid:
          type: string
          description: The public key of the node.
        alias:
          type: string
          nullable: true
          description: The alias of the node.
        categoryShare:
          type: number
          format: float
          nullable: true
          description: Shortest path share for the primary category.
        categoryRank:
          type: integer
          nullable: true
          description: Rank for the primary category.
        microShare:
          type: number
          format: float
          nullable: true
        microRank:
          type: integer
          nullable: true
        commonShare:
          type: number
          format: float
          nullable: true
        commonRank:
          type: integer
          nullable: true
        macroShare:
          type: number
          format: float
          nullable: true
        macroRank:
          type: integer
          nullable: true
    AllTopNodes:
      type: object
      properties:
        micro:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
        common:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
        macro:
          type: array
          items:
            $ref: '#/components/schemas/SingleCategoryTopNode'
    NetworkSubsumptionData:
      type: object
      properties:
        date:
          type: string
          format: date
          description: The date for the data point.
        micro:
          type: number
          description: Shortest path share percentage for micro payments.
        common:
          type: number
          description: Shortest path share percentage for common payments.
        macro:
          type: number
          description: Shortest path share percentage for macro payments.
    OurNodeCategoryRank:
      type: object
      properties:
        latestRank:
          type: integer
          nullable: true
        rankChange:
          type: integer
          nullable: true
          description: Change in rank from the start of the period. Negative is better.
        latestShare:
          type: number
          format: float
          nullable: true
        previousShare:
          type: number
          format: float
          nullable: true
    OurNodeRanksForAllCategories:
      type: object
      properties:
        micro:
          $ref: '#/components/schemas/OurNodeCategoryRank'
        common:
          $ref: '#/components/schemas/OurNodeCategoryRank'
        macro:
          $ref: '#/components/schemas/OurNodeCategoryRank'
    ChannelDrainInfo:
      type: object
      properties:
        in_share:
          type: number
          format: float
          description: The inbound shortest path share for the channel.
        out_share:
          type: number
          format: float
          description: The outbound shortest path share for the channel.
        drain:
          type: number
          format: float
          nullable: true
          description: The calculated liquidity drain. Positive indicates net inbound flow.
    GraphNode:
      type: object
      properties:
        id:
          type: string
          description: Node ID (public key).
        name:
          type: string
          description: Display name (alias or truncated ID).
        val:
          type: number
          description: Value used for sizing the node in the graph.
        isCentralNode:
          type: boolean
          description: Whether this is the central node of the graph.
        color:
          type: string
          description: HSL color string for the node.
    GraphLink:
      type: object
      properties:
        source:
          type: string
          description: Node ID of the source node.
        target:
          type: string
          description: Node ID of the target node.
        value:
          type: number
          format: float
          description: The shortest path share value of the link, used for weighting.
    NodeGraphData:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/GraphNode'
        links:
          type: array
          items:
            $ref: '#/components/schemas/GraphLink'
servers:
  - url: /
    description: Current Server
  - url: https://5sats.com
    description: Production Server
